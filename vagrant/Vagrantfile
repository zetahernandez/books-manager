# -*- mode: ruby -*-
# vi: set ft=ruby :
#############################################################################
# USER PROPERTY VALUES
# Override any (or none) of the above properties with values for the current
# user. The file user.rb is ignored by hg; it only exists locally on each
# workstation. That makes it safer to put sensitive information like
# passwords in it.
# Use the file user-template.rb as a starting point to create user.rb.
#############################################################################
load 'user.rb'

Vagrant.configure("2") do |config|
  
  config.vm.define 'books-manager' do |config|
  
    # All Vagrant configuration is done here. The most common configuration
    # options are documented and commented below. For a complete reference,
    # please see the online documentation at vagrantup.com.

    # Every Vagrant virtual environment requires a box to build off of.
    config.vm.box = $box

    # The url from where the 'config.vm.box' box will be fetched if it
    # doesn't already exist on the user's system.
    config.vm.box_url = $box_url

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # config.vm.network :forwarded_port, guest: 80, host: 8080
    config.vm.network :forwarded_port, id: 'ssh', guest: 22, host: 4444
    config.vm.network :forwarded_port, id: 'app', guest: 9000, host: 9000
    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # config.vm.network :private_network, ip: "192.168.33.10"
    config.vm.network :private_network, ip: "44.44.44.4"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network :public_network

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    config.vm.synced_folder $repo, "/usr/local/books-manager"

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    config.vm.provider :virtualbox do |vb|
      # Don't boot with headless mode
      vb.gui = false

      # VBox name
      vb.name = "Books Manager Server"
    
      # Use VBoxManage to customize the VM. For example to change memory:
      vb.customize ["modifyvm", :id, "--memory", "1024"]
    end
  
    # Enable provisioning with chef solo, specifying a cookbooks path, roles
    # path, and data_bags path (all relative to this Vagrantfile), and adding
    # some recipes and/or roles.
    #
    config.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "my-recipes/cookbooks"
      chef.roles_path = "my-recipes/roles"
      chef.data_bags_path = "my-recipes/data_bags"
      
      chef.add_role "vagrant-books-manager-server"
    
      # You may also specify custom JSON attributes:
      chef.json = { :aws_access_key_id => '',
                    :aws_secret_access_key => '',
                    :disableIPv6 => true }
    end

  
  end

  config.vm.define 'books-manager-prod' do |config|
  
    # All Vagrant configuration is done here. The most common configuration
    # options are documented and commented below. For a complete reference,
    # please see the online documentation at vagrantup.com.

    # Every Vagrant virtual environment requires a box to build off of.
    config.vm.box = "dummy"
 

    
    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network :public_network


    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    config.vm.provider :aws do |aws, override|
      aws.access_key_id = $AWS_ACCESS_KEY_ID
      aws.secret_access_key = $AWS_SECRET_ACCESS_KEY
      aws.security_groups = ['launch-wizard-1']


      aws.ami = "ami-e63a5dd6"
      aws.region="us-west-2"
      aws.instance_type = "t1.micro"
      override.ssh.username = "ubuntu"
      override.ssh.private_key_path = $PRIVATE_KEY_PATH
      aws.keypair_name = $KEYPAIR_NAME 
    end
  
    # Enable provisioning with chef solo, specifying a cookbooks path, roles
    # path, and data_bags path (all relative to this Vagrantfile), and adding
    # some recipes and/or roles.
    #
    config.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "my-recipes/cookbooks"
      chef.roles_path = "my-recipes/roles"
      chef.data_bags_path = "my-recipes/data_bags"
      
      chef.add_role "aws-books-manager-server"
    
      # You may also specify custom JSON attributes:
      chef.json = { :aws_access_key_id => $AWS_ACCESS_KEY_ID,
                    :aws_secret_access_key => $AWS_SECRET_ACCESS_KEY,
                    :aws_region => "us-west-2",
                    :disableIPv6 => false,
                    :dyndns_user => $DYNDNS_USER,
                    :dyndns_pass => $DYNDNS_PASS }
    end
  end

  config.vm.define 'books-manager-database' do |config|
        # All Vagrant configuration is done here. The most common configuration
    # options are documented and commented below. For a complete reference,
    # please see the online documentation at vagrantup.com.

    # Every Vagrant virtual environment requires a box to build off of.
    config.vm.box = $box

    # The url from where the 'config.vm.box' box will be fetched if it
    # doesn't already exist on the user's system.
    config.vm.box_url = $box_url

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # config.vm.network :forwarded_port, guest: 80, host: 8080
    config.vm.network :forwarded_port, id: 'ssh', guest: 22, host: 4441
    config.vm.network :forwarded_port, id: 'app', guest: 27017, host: 27017
    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # config.vm.network :private_network, ip: "192.168.33.10"
    config.vm.network :private_network, ip: "44.44.44.2"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network :public_network

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    config.vm.synced_folder $repo, "/usr/local/books-manager"

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    config.vm.provider :virtualbox do |vb|
      # Don't boot with headless mode
      vb.gui = false

      # VBox name
      vb.name = "Books Manager Database"
    
      # Use VBoxManage to customize the VM. For example to change memory:
      vb.customize ["modifyvm", :id, "--memory", "768"]
    end
  
    # Enable provisioning with chef solo, specifying a cookbooks path, roles
    # path, and data_bags path (all relative to this Vagrantfile), and adding
    # some recipes and/or roles.
    #
    config.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "my-recipes/cookbooks"
      chef.roles_path = "my-recipes/roles"
      chef.data_bags_path = "my-recipes/data_bags"
      
      chef.add_role "vagrant-books-manager-database"
    
      # You may also specify custom JSON attributes:
      chef.json = { :aws_access_key_id => '',
                    :aws_secret_access_key => '',
                    :disableIPv6 => true }
    end
  end
end